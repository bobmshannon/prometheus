default_conf:
  ENV:
    CONFIG_FILE: '{{ service_home }}/var/conf/prometheus.yml'
    LOG_FILE: '{{ service_home }}/var/log/prometheus-console.log'
    LOG_LEVEL: info
    RELOAD_URL: '{{ conf.prometheus.protocol }}://{{ conf.prometheus.hostname }}:{{ conf.prometheus.port }}/-/reload'
    STORAGE_TSDB_PATH: '{{ service_home }}/var/data/'
    WEB_LISTEN_ADDRESS: '{{ conf.prometheus.address }}:{{ conf.prometheus.port }}'
  logrotate:
    files:
      - filepath: '{{ conf.ENV.LOG_FILE }}'
        settings: []
    global:
      - compress
      - copytruncate
      - daily
      - rotate 7
      - size 1024M
  prometheus:
    address: 0.0.0.0
    alertmanager_scheme: '{{ discovered.alertmanager-scheme }}'
    alertmanagers: '{{ discovered.all-alertmanagers }}'
    ca_path: '{{ ssl.ca_path }}'
    evaluation_interval: 1m
    hostname: '{{ host.hostname }}'
    custom_configs: '{{ exclude }}'
    custom_scrapes: '{{ exclude }}'
    port: 9090
    prometheus_metrics: '{{ discovered.prometheus-metrics }}'
    scrape_interval: 30s
    scrape_timeout: 30s
    ssl:
      ca_path: '{{ ssl.ca_path }}'
      cert_path: '{{ ssl.cert_path }}'
      pem_path: '{{ ssl.pem_path }}'
discovery:
  consumes:
    alertmanager-scheme:
      role: prometheus-alertmanager
      select: scheme
    all-alertmanagers:
      all: true
      role: prometheus-alertmanager
      select: endpoint
    prometheus-metrics:
      all: true
      role: prometheus-metrics
      stack: '*'
  produces:
    prometheus:
      endpoint: '{{ self_discovered.prometheus.hostname }}:{{ self_discovered.prometheus.port }}'
      path: ''
      port: '{{ conf.prometheus.port }}'
      role: prometheus
      scheme: http
    prometheus-push:
      endpoint: '{{ self_discovered.prometheus.hostname}}:{{ self_discovered.prometheus.port }}'
      path: /push
      port: '{{ conf.prometheus.port }}'
      role: prometheus-push
      scheme: '{{ conf.prometheus.protocol }}'
managed_files:
  var/conf/logrotate.conf:
    live-reload: kick
    type: erb
  var/conf/prometheus.yml:
    live-reload: kick
    type: tmpl
